// <auto-generated />
using System;
using ContactList.Dal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactList.Dal.Migrations
{
    [DbContext(typeof(ContactlistDbContext))]
    partial class ContactlistDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContactList.Domain.Models.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ContactCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subcategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContactCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe3117ee-9f22-4bd3-9480-ab25c583aa42"),
                            BirthDate = new DateTime(1995, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactCategoryId = new Guid("70a8f576-616e-44db-a4dc-b13134a8580b"),
                            Email = "jan.kowalski@contactlistapp.com",
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            PhoneNumber = "123456789",
                            Subcategory = "szef",
                            UserId = new Guid("76dd46da-a95c-4c00-a151-960c6e1854cc")
                        },
                        new
                        {
                            Id = new Guid("c7041a8b-6dfa-4b52-8afe-da1549a96b0d"),
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactCategoryId = new Guid("70a8f576-616e-44db-a4dc-b13134a8580b"),
                            Email = "adam.nowak@contactlistapp.com",
                            FirstName = "Adam",
                            LastName = "Nowak",
                            PhoneNumber = "987654321",
                            Subcategory = "klient",
                            UserId = new Guid("76dd46da-a95c-4c00-a151-960c6e1854cc")
                        });
                });

            modelBuilder.Entity("ContactList.Domain.Models.Entities.ContactCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categroies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70a8f576-616e-44db-a4dc-b13134a8580b"),
                            Name = "służbowy"
                        },
                        new
                        {
                            Id = new Guid("726bbd2b-a32c-43a3-bfbd-15a94eb21de3"),
                            Name = "prywatny"
                        },
                        new
                        {
                            Id = new Guid("d7694440-7cb0-4b47-b653-77edb26f26b7"),
                            Name = "inny"
                        });
                });

            modelBuilder.Entity("ContactList.Domain.Models.Entities.ContactSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactCategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cdba565-646f-40d3-a66b-7502de2f2d09"),
                            ContactCategoryId = new Guid("70a8f576-616e-44db-a4dc-b13134a8580b"),
                            Name = "szef"
                        },
                        new
                        {
                            Id = new Guid("d779bf0d-4579-4ed2-960b-6b17d215c3f8"),
                            ContactCategoryId = new Guid("70a8f576-616e-44db-a4dc-b13134a8580b"),
                            Name = "klient"
                        });
                });

            modelBuilder.Entity("ContactList.Domain.Models.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("76dd46da-a95c-4c00-a151-960c6e1854cc"),
                            Email = "user1@contactlistapp.com",
                            Password = "!@#Password123"
                        });
                });

            modelBuilder.Entity("ContactList.Domain.Models.Entities.Contact", b =>
                {
                    b.HasOne("ContactList.Domain.Models.Entities.ContactCategory", "Category")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactList.Domain.Models.Entities.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContactList.Domain.Models.Entities.ContactSubcategory", b =>
                {
                    b.HasOne("ContactList.Domain.Models.Entities.ContactCategory", "ContactCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ContactCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactCategory");
                });

            modelBuilder.Entity("ContactList.Domain.Models.Entities.ContactCategory", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("ContactList.Domain.Models.Entities.User", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
